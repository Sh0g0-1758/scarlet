To be:
Date - 25th Jan 2025
1. Use Boost Program Options instead of manually handling argc and argv functions.
3. (Lexer.cc) Alternative to erasing the file_contents text repeatedly? DONE
4. (lexer.cc) Take characters from filestream. DONE
5. (parser.cc) {Line:125} unop set_op can be enum also.
6. Generate txt file for scar. DONE {Not needed as it will incur a lot of overhead and serves no purpose}
7. Create static library for lexer, parser, codegen.
8. (scar.hh) {Line:60} Need to implement instruction of 2 source 1 dst.
9. Implement namespace for all functions.

Design Decision:
Date - 25th Jan 2025
1. Compiler supports 'sc', 'c', 'cc' extensions.
    For Lexer:
    Currently supported tokens: [IDENTIFIER, CONSTANT, INT, VOID, RETURN, OPEN_PARANTHESES, CLOSE_PARANTHESES, OPEN_BRACE, CLOSE_BRACE, SEMICOLON, TILDE, HYPHEN, DECREMENT_OPERATOR, UNKNOWN]
    1. (Token.hh) For Lexer, we have implemented a wrapper which can store the token along with it's value (which is optional).
    2. (Token.hh) Also to help with debugging, we have "print_token()" function which prints the identifier to Debugger and "to_string()" function which return the token to the code.
    3. (Regex.cc) Currently we have matchWord and matchDigit functions.
    4. (lexer.cc) "Highly Recursive Function"
    5. (lexer.cc) {Line:30} Hyphen can be a decrement as well as minus operator.
    6. (lexer.cc) {Line:75} A single '/' does not mean anything. It does mean division but right now not supported.
    7. (ast.hh) {Line:75} Do we need a vector of expressions?
